#+TITLE: Emacs configuration

* [[https://github.com/technomancy/better-defaults][Better Defaults]]

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sources/better-defaults.el")
(require 'better-defaults)
#+END_SRC

* Personal Information

#+BEGIN_SRC emacs-lisp

  (setq user-full-name "Ahmad Zareei"
        user-mail-address "zareei@berkeley.edu"
        calendar-latitude 49.2827
        calendar-longitude -123.1207
        calendar-location-name "Vancouver")
#+END_SRC

* Add =resources= to =load-path=
  
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/sources/")
#+END_SRC
** a great [[http://www.lambdacat.com/modern-emacs-package-management-with-cask-and-pallet/][link]] on how to configure cask and pallet
#+BEGIN_SRC emacs-lisp
   (require 'cask "~/.cask/cask.el")
   (cask-initialize) 
   (require 'pallet)
   (pallet-mode t)
#+END_SRC
  
* UI preferences
** Disabling Menu and Scroll bar
 #+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
 #+END_SRC
   
** Highlighting the current line
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'zenburn t)
#+END_SRC
** Font size
#+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-+") 'text-scale-increase)
 (global-set-key (kbd "C-_") 'text-scale-decrease)
#+END_SRC

** Fill colum mode
#+BEGIN_SRC emacs-lisp
(setq fci-rule-column 90)
(defun az/fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'az/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(global-set-key [remap fill-paragraph]
                #'az/fill-or-unfill)
#+END_SRC

** Bookmark startpage
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
(require 'bookmark)
(bookmark-bmenu-list)
(switch-to-buffer "*Bookmark List*")
#+END_SRC
* Latex Mode
** Turning on Cd-latex for typping math
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
#+END_SRC
** Adding latex extra mode, =C-c C-a= will compile fully and handle errors
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook #'latex-extra-mode)
#+END_SRC 
unfortunately this mode disables c-c c-f mode for font selection
so we turn it off in latex-extra to bind c-c c-f to font selection
#+BEGIN_SRC emacs-lisp
(custom-set-variables '(latex/override-font-map nil))
#+END_SRC
** Adding latex-preview-pane-mode to view file instead of openning evice
#+BEGIN_SRC emacs-lisp
(eval-after-load "tex"
  '(add-to-list
    'TeX-view-program-list
    '("preview-pane-mode"
      latex-preview-pane-mode)))
;; (add-hook 'LaTeX-mode-hook #'latex-preview-pane-mode)
(custom-set-variables
 '(TeX-view-program-list
   (quote
    (("preview-pane-mode"
      (latex-preview-pane-mode)
      nil))))
 '(TeX-view-program-selection
   (quote
    (((output-dvi has-no-display-manager)
      "dvi2tty")
     ((output-dvi style-pstricks)
      "dvips and gv")
     (output-dvi "xdvi")
     (engine-omega "Atril")
     (output-pdf "preview-pane-mode")
     (output-html "xdg-open")))))
#+END_SRC
** some key bindings for latex mode
   + I love to use preview-buffer, and I use f6 to activate this mode, instead of C-c p C-b
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook
          (lambda () (local-set-key (kbd "<f6>") #'preview-buffer)))
(add-hook 'LaTeX-mode-hook
          (lambda () (local-set-key (kbd "<f5>") #'preview-environment)))

(add-hook 'LaTeX-mode-hook
          (lambda () (local-set-key (kbd "<f7>") #'latex-preview-pane-mode)))
(add-hook 'LaTeX-mode-hook
          (lambda () (local-set-key (kbd "M-p") #'ace-window)))
#+END_SRC
** Adding a default biblography for ref-tex and enabling it all the time in auctex
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(setq reftex-default-bibliography '("~/Dropbox/Research/Bibtex/library/library.bib")) 
#+END_SRC
** Adding latex-image to see pictures of formula in orgmode
#+BEGIN_SRC emacs-lisp
(setq org-latex-create-formula-image-program 'imagemagick)
;; For changing the width of the image
(setq org-image-actual-width nil)
#+END_SRC
* Programming mode
** Highlighting uncomiited Changes
#+BEGIN_SRC emacs-lisp
(require 'diff-hl)
(add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
(add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode)
#+END_SRC

** Terminal 
   I like to use multi term for terminal and it is binded with the key C-c s
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'multi-term)
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
(require 'dired+)
(require 'dired-open)
#+END_SRC

Open media files accordingly
#+BEGIN_SRC emacs-lisp
(setq dired-open-extensions
      '(("pdf" . "evince")
        ("mkv" . "vlc")
        ("mp4" . "vlc")
        ("avi" . "vlc")
        ("mp3" . "vlc")))
#+END_SRC
Using a good view for dired directory
- =l= for listing
- =h= for human readable size
- =A= for not including "." and ".."
#+BEGIN_SRC emacs-lisp
(setq-default dired-listing-switches "-lhA")
#+END_SRC
Kill buffers of deleted files
#+BEGIN_SRC emacs-lisp
(setq dired-clean-up-buffers-too t)
#+END_SRC
copying directories recursively, without asking
deleting directories with permission
#+BEGIN_SRC emacs-lisp
(setq dired-recursive-copies 'always)
(setq dired-recursive-deletes 'top)
#+END_SRC

** Tramp-term
#+BEGIN_SRC emacs-lisp
(require 'tramp-term)
#+END_SRC
* Buffers and files

** Remember recent files
#+BEGIN_SRC emacs-lisp
;; save recent files
(require 'recentf)
(recentf-mode t)
(setq recentf-save-file (concat user-emacs-directory "recentf")
      recentf-max-saved-items 200
      recentf-max-menu-items 15)
(global-set-key (kbd "C-x C-g") 'recentf-open-files)
#+END_SRC

** Swiper mode
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-fi1nd-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
(setq ivy-use-virtual-buffers t)
#+END_SRC

** Writing backups somehwere else
#+BEGIN_SRC emacs-lisp
;; store all autosave files in the tmp dir
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
;; backups in backup dir
(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backup"))
      delete-old-versions t
      kept-new-versions 24
      kept-old-versions 12
      version-control t)
(setq create-lockfiles nil)
#+END_SRC
** Generate unique buffer names
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
(setq uniquify-separator "/")
(setq uniquify-after-kill-buffer-p t)    ; rename after killing uniquified
(setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special buffers
#+END_SRC
** Mode line defaults
#+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)
(size-indication-mode nil)
#+END_SRC
** Theme
** Adding ace-jump mode and bind it to c-x o
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p") 'ace-window)
#+END_SRC
** scrolling the other window key binding 
Scrolling up and down the other window
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-V") 'scroll-other-window-down)
(global-set-key (kbd "M-V") 'scroll-other-window-up)
#+END_SRC
** Resizing the windows
#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-<") 'shrink-window-horizontally)
    (global-set-key (kbd "C->") 'enlarge-window-horizontally)
    (global-set-key (kbd "C-{") 'shrink-window)
    (global-set-key (kbd "C-}") 'enlarge-window)
#+END_SRC
** Expand Region - Smart
#+BEGIN_SRC emacs-lisp
 (require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Open files in Desktop
I want to open the corresponding foler hitting f4 key
#+BEGIN_SRC emacs-lisp
(defun xah-open-in-desktop ()
  "Show current file in desktop (OS's file manager).
URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2015-11-30"
  (interactive)
  (cond
   ((string-equal system-type "windows-nt")
    (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" default-directory t t)))
   ((string-equal system-type "darwin") (shell-command "open ."))
   ((string-equal system-type "gnu/linux")
    (let (
          (process-connection-type nil)
          (openFileProgram (if (file-exists-p "/usr/bin/xdg-open")
                               "/usr/bin/gvfs-open"
                             "/usr/bin/gvfs-open")))
      (start-process "" nil openFileProgram "."))
    ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. For example: with nautilus
    )))
(global-set-key (kbd "<f4>") 'xah-open-in-desktop) 

#+END_SRC
* Flycheck & flyspell
#+BEGIN_SRC emacs-lisp
(setq global-flycheck-mode t)
(global-set-key (kbd "<f8>") 'flyspell-buffer)
#+END_SRC
* Org-mode
** Todo keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "SOMEDAY(s)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+END_SRC
   - and changing colors for them
#+BEGIN_SRC emacs-lisp
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("SOMEDAY" :foreground "green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))

#+END_SRC
** Showing images in the org mode
This will show the inline image using =C-c C-x C-v=
#+BEGIN_SRC emacs-lisp
(defun do-org-show-all-inline-images ()
  (interactive)
  (org-display-inline-images t t))
(global-set-key (kbd "C-c C-x C-v")
                'do-org-show-all-inline-images)
#+END_SRC 
** Adding org-bullets for the org-mode
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
   
** Use Syntax highlighting while editing

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC
#+BEGIN_SRC emacs-lisp

#+END_SRC
** Adding org-agenda-files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/Dropbox/org/home.org"
                               "~/Dropbox/org/scholar.org"))
#+END_SRC
** Adding org-directory
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org")
(setq org-default-notes-file "~/Dropbox/org/inbox.org")
#+END_SRC
** Timestamping the done part
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
;; (setq org-log-done 'note)
#+END_SRC
** Defining the org-mode globall keys for agenda view, ...
#+BEGIN_SRC emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
** Capture templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Dropbox/org/inbox.org")
               "* TODO %?\n%U\n%a\n" )
              ("n" "note" entry (file "~/Dropbox/org/inbox.org")
               "* %? :NOTE:\n%U\n%a\n")
              ("d" "Diary" entry (file+datetree "~/Dropbox/org/diary.org")
               "* %?\n%U\n" )
              ("m" "Meeting" entry (file "~/Dropbox/org/inbox.org")
               "* MEETING with %? :MEETING:\n%U")
              ("p" "Phone call" entry (file "~/Dropbox/org/inbox.org")
               "* PHONE %? :PHONE:TASK:\n%U"))))
;; I don't understand this one
;;               ("r" "respond" entry (file "~/Dropbox/org/inbox.org")
;;               "* NEXT Respond to %? subject %? \n SCHEDULED: %t\n%U\n%a\n" )

#+END_SRC
** Refiling configuration
#+BEGIN_SRC emacs-lisp
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets 
(setq org-refile-use-outline-path t)

; Targets complete directly
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))
;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun az/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'az/verify-refile-target)
#+END_SRC
** Defining customized keys for some stuff
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> w") 'forecast)
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

** allows changing todo states with S-left and S-right skipipng all of the normal processing when entering or leaving a todo state
#+BEGIN_SRC emacs-lisp
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC
** Fast todo selection
#+BEGIN_SRC emacs-lisp
(setq org-use-fast-todo-selection t)
#+END_SRC
** Todo state triggers - [[http://doc.norang.ca/org-mode.html][source line]]
#+BEGIN_SRC emacs-lisp
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
** Org indentation mode
#+BEGIN_SRC emacs-lisp
  (setq org-indent-mode 1)
  (setq  org-startup-indented 1)
#+END_SRC

** Planning the day
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("F" "Full List"
            (
               (todo "NEXT")
               (tags-todo "TASK")
               (tags-todo "PAPER")
               (tags-todo "SEMINAR")
               (tags-todo "PROJECTS")
               (tags-todo "READ")))
          ("t" "NEXT & TODO" ((todo "NEXT") (todo "TODO")))
          ("j" "Journal paper" tags-todo "PAPER")
          ("e" "SEMINAR" tags-todo "SEMINAR")
          ("c" "CALL" todo "PHONE")
          ("r" "READ" tags-todo "READ")
          )
   )
#+END_SRC

** Setting the Diary 
#+BEGIN_SRC emacs-lisp
(setq diary-file "/Dropbox/org/diary.org")
(setq org-agenda-include-diary t)
#+END_SRC
** Org-babel setup
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(org-babel-load-languages (quote ((emacs-lisp . t) 
                                    (python . t) 
                                    (octave . t)
                                    (gnuplot . t))))
 '(org-confirm-babel-evaluate nil))
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

** Key bindings to open files quickly
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "\e\ei")
		(lambda () (interactive) (find-file "~/Dropbox/org/inbox.org")))
(global-set-key (kbd "\e\es")
		(lambda () (interactive) (find-file "~/Dropbox/org/scholar.org")))
(global-set-key (kbd "\e\eh")
		(lambda () (interactive) (find-file "~/Dropbox/org/home.org")))
#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (find-file ~/Dropbox/org/home.org) |

* Weblog editing
** Adding jekyll-mode 
I have a Yasnipet for template and then export the body

* Yasnipet
** Configuring Yasnippet
I store my snippets in here
#+BEGIN_SRC emacs-lisp
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(yas-global-mode 1)
#+END_SRC
Note letting to indent automatically
#+BEGIN_SRC emacs-lisp
(setq yas/indent-line nil)
#+END_SRC

** Changing keys for conflict between yasnippet and orgmode
first we define this function
#+BEGIN_SRC emacs-lisp
          (defun yas/org-very-safe-expand ()
            (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
#+END_SRC
and then telling org-mode to use this function
#+BEGIN_SRC emacs-lisp
          (add-hook 'org-mode-hook
                    (lambda ()
                      (make-variable-buffer-local 'yas/trigger-key)
                      (setq yas/trigger-key [tab])
                      (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
                      (define-key yas/keymap [tab] 'yas/next-field)))

#+END_SRC

* Email Setup  
** Global keys for mu4e
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f10>") 'mu4e) 
#+END_SRC
** BBDB
#+BEGIN_SRC emacs-lisp
(require 'bbdb)
#+END_SRC
** Also Saving my contacts to the dropbox
#+BEGIN_SRC emacs-lisp
(setq bbdb-file "~/Dropbox/bbdb/contacts")
#+END_SRC
** Setting up mu4e
I am using msmtp for sending email
a good tutorial to setup is [[https://easyengine.io/tutorials/linux/ubuntu-postfix-gmail-smtp/][here]] 
and I am using offlineimap for syncing emails
*** setting up basics
#+BEGIN_SRC emacs-lisp
(require 'mu4e)

;; default
(setq mu4e-maildir "~/Maildir")

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;; show images
(setq mu4e-show-images t)
#+END_SRC
*** Setting up offlineimap for receiving emails and update every 10 min
#+BEGIN_SRC emacs-lisp
(setq
  mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
  mu4e-update-interval 300)             ;; update every 5 minutes
#+END_SRC
*** Speeding up indexing emails
See manpage for =mu-update-index= 
Everyonce in a while I do complete indexing
#+BEGIN_SRC emacs-lisp
(setq
  mu4e-index-cleanup nil      ;; don't do a full cleanup check
  mu4e-index-lazy-check t)    ;; don't consider up-to-date dirs
#+END_SRC
*** Adding mails and configuring
#+BEGIN_SRC emacs-lisp
(setq mu4e-user-mail-address-list (list "ahmad.zareei@gmail.com" "zareei@berkeley.edu" ))
(setq mu4e-drafts-folder "/gmail/[Gmail].Drafts") ;; I use my gmail to store drafts
;; Use fancy chars
(setq mu4e-use-fancy-chars t)
;; Shortcuts for my inboxes
(setq mu4e-maildir-shortcuts
      '(("/gmail/INBOX" . ?g)
        ("/bmail/INBOX" . ?b)
        ))
;; sending mail
(setq message-send-mail-function 'message-send-mail-with-sendmail
      sendmail-program "/usr/bin/msmtp")
;; Choose account label to feed msmtp -a option based on From header
;; in Message buffer; This function must be added to
;; message-send-mail-hook for on-the-fly change of From address before
;; sending message since message-send-mail-hook is processed right
;; before sending message
(defun choose-msmtp-account ()
  (if (message-mail-p)
      (save-excursion
        (let*
            ((from (save-restriction
                     (message-narrow-to-headers)
                     (message-fetch-field "from")))
             (account
              (cond
               ((string-match "ahmad.zareei@gmail.com" from) "gmail")
               ((string-match "zareei@berkeley.edu" from) "bmail")
               ((string-match "ahmad@berkeley.edu" from) "bmail")
               ((string-match "azareei@berkeley.edu" from) "bmail"))))
          (setq message-sendmail-extra-arguments (list '"-a" account))))))
(setq message-sendmail-envelope-from 'header)
(add-hook 'message-send-mail-hook 'choose-msmtp-account)
;; When replying to an email I want to use the address I received this message to as the sender of the reply.
(add-hook 'mu4e-compose-pre-hook
          (defun my-set-from-address ()
            "Set the From address based on the To address of the original."
            (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
              (if msg
                  (setq user-mail-address
                        (cond
                         ((mu4e-message-contact-field-matches msg :to "ahmad.zareei@gmail.com")
                          "ahmad.zareei@gmail.com")
                         ((mu4e-message-contact-field-matches msg :to "zareei@berkeley.edu")
                          "zareei@berkeley.edu")
                         ((mu4e-message-contact-field-matches msg :to "ahmad@berkeley.edu")
                          "zareei@berkeley.edu")
                         ((mu4e-message-contact-field-matches msg :to "azareei@berkeley.edu")
                          "zareei@berkeley.edu")                  
                         (t "ahmad.zareei@gmail.com")))))))

(add-to-list 'mu4e-bookmarks
             '("maildir:/gmail/INBOX OR maildir:/bmail/INBOX flag:unread AND NOT flag:trashed" "Unread All"  ?a))
(add-to-list 'mu4e-bookmarks
             '("maildir:/gmail/INBOX flag:unread AND NOT flag:trashed" "Unread Gmail"  ?g))
(add-to-list 'mu4e-bookmarks
             '("maildir:/bmail/INBOX flag:unread AND NOT flag:trashed" "Unread Berkeley"  ?b))

;;; Save attachment (this can also be a function)
(setq mu4e-attachment-dir "~/attachments")

;; This is to use different settings for two different accounts that I have
;; Contexts
(setq mu4e-contexts
      `( ,(make-mu4e-context
           :name "Gmail - ahmad.zareei@gmail.com"
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg
                                                               :to "ahmad.zareei@gmail.com")))
           :vars '(

                   (mu4e-sent-messages-behavior . delete)
                   (mu4e-sent-folder . "/gmail/[Gmail].Sent Mail")
                   (mu4e-drafts-folder . "/gmail/[Gmail].Drafts")
                   (mu4e-trash-folder . "/gmail/[Gmail].Trash")
                   (mu4e-refile-folder . "/gmail/[Gmail].Archive")
                   (user-mail-address . "ahmad.zareei@gmail.com")
                   ))
         ,(make-mu4e-context
           :name "Berkeley - zareei@berkeley.edu"
           :match-func (lambda (msg)
                         (when msg
                           (mu4e-message-contact-field-matches msg
                                                               :to "zareei@berkeley.edu")))
           :vars '(
                   (mu4e-sent-folder . "/bmail/[Gmail].Sent Mail")
                   (mu4e-drafts-folder . "/bmail/[Gmail].Drafts")
                   (mu4e-trash-folder . "/bmail/[Gmail].Trash")
                   (mu4e-refile-folder . "/bmail/[Gmail].Archive")
                   (user-mail-address . "zareei@berkeley.edu")
                   ))))
(setq mu4e-context-policy 'pick-first)
#+END_SRC
*** Some more modification beautifying mu4e for my use
#+BEGIN_SRC emacs-lisp
(setq mu4e-compose-format-flowed t)
;; give me ISO(ish) format date-time stamps in the header list
(setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
;; show full addresses in view message (instead of just names)
;; toggle per name with M-RET
(setq mu4e-view-show-addresses 't)
;; the headers to show in the headers list -- a pair of a field
;; and its width, with `nil' meaning 'unlimited'
;; (better only use that for the last field.
;; These are the defaults:
(setq mu4e-headers-fields
    '( (:date          .  25)    ;; alternatively, use :human-date
       (:flags         .   6)
       (:from          .  22)
       (:subject       .  nil))) ;; alternatively, use :thread-subject
;; Rendering org mode in mu4e
;; configure orgmode support in mu4e
(require 'org-mu4e)
;; This interesting function turns you draft into org-mode when the cursor 
;; crosses the title line; and turn the mail back to 
;; mu4e-compose-mode when cursor goes back. 
(add-hook 'mu4e-compose-mode-hook 'org~mu4e-mime-switch-headers-or-body)
;; This enables Emacs to store link to message 
;; if in header view, not to header query. 
(setq org-mu4e-link-query-in-headers-mode nil)
;;When mail is sent, org-mu4e can automatically convert org body to HTML: 
(setq org-mu4e-convert-to-html t)
;; Setting up capture for org-mode
(setq org-capture-templates
      '(("t" "todo" entry (file+headline "~/Dropbox/org/inbox.org" "Tasks")
         "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n")))

#+END_SRC
*** Enabling notification for receiving emails
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'mu4e-alert
  ;; Enable Desktop notifications
  (mu4e-alert-set-default-style 'notifications) 
  (mu4e-alert-set-default-style 'libnotify))  ; Alternative for linux
;; (setq mu4e-alert-interesting-mail-query
;;      (concat
;;       "maildir:/gmail/INBOX OR maildir:/bmail/INBOX" " flag:unread AND NOT flag:trashed"))

#+END_SRC
*** Org-mode-links for copying to my todo list
#+BEGIN_SRC emacs-lisp
  (define-key mu4e-headers-mode-map (kbd "C-c p") 'org-store-link)
  (define-key mu4e-view-mode-map    (kbd "C-c p") 'org-store-link)
#+END_SRC

* Fun! (weather forecast, google maps!)
** Adding weather forecast
#+BEGIN_SRC emacs-lisp
(require 'forecast)
 (setq forecast-api-key "f4482c0687a9ce39f7a22f34a83056f6")
#+END_SRC   

** Google-maps - It's so cool- [[https://julien.danjou.info/projects/emacs-packages#google-maps][check here ]]
#+BEGIN_SRC emacs-lisp
(require 'google-maps)
#+END_SRC
** Google-this
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'google-this-mode-submap)
#+END_SRC

* elfeed
** Setting the orgfile for data base
#+BEGIN_SRC emacs-lisp
(progn
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Dropbox/org/elfeed.org")))
;;(setq rmh-elfeed-org-files (list "~/Dropbox/org/elfeed.org"))
#+END_SRC

#+RESULTS:

** Setting some bookmarks
#+BEGIN_SRC emacs-lisp
(defhydra az/hydra-elfeed ()
   "filter"
   ("f" (elfeed-search-set-filter "@2-months-ago +fluids") "fluids")
   ("p" (elfeed-search-set-filter "@2-months-ago +physics") "physics")
   ("e" (elfeed-search-set-filter "@2-months-ago +econ") "econ blogs")
   ("n" (elfeed-search-set-filter "@2-months-ago +wsj") "news wsj")
   ("*" (elfeed-search-set-filter "@2-months-ago +star") "Starred")
   ("M" elfeed-toggle-star "Mark")
   ("A" (elfeed-search-set-filter "@2-months-ago") "All")
   ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
   ("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
   ("q" nil "quit" :color blue)
   )
#+END_SRC
#+RESULTS:
: az/hydra-elfeed/body
** Setting the map key
#+BEGIN_SRC emacs-lisp
(define-key elfeed-search-mode-map "q" 'bjm/elfeed-save-db-and-bury)
(define-key elfeed-search-mode-map "Q" 'bjm/elfeed-save-db-and-bury)
(define-key elfeed-search-mode-map "j" 'az/hydra-elfeed/body)
(define-key elfeed-search-mode-map "J" 'az/hydra-elfeed/body)
(define-key elfeed-search-mode-map "m" 'elfeed-toggle-star)
(define-key elfeed-search-mode-map "M" 'elfeed-toggle-star)
(global-set-key (kbd "<f9> e") 'elfeed)
#+END_SRC

#+RESULTS:
: elfeed-toggle-star


* Browser
Default Browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")
#+END_SRC

* Explaining some modified key-modes I have
- f12 -> org-agenda
- f10 -> for checking emails with mu4e
- f6 -> for preview-buffer in latex
- f9 b -> bbdb mode
- f9 c -> calendar
- f9 w -> weather forecast
- f9 e -> elfeed
- f8 -> ispell-buffer
- f4 -> open the corresponding foler outside
- C-c c -> capture with emacs
- C-c s -> for multi-term
- C-x C-g -> choosing from recentf in ido-mode
- C-c C-x C-v -> Show images in org-mode
- C-< -> shrink the window horizontally
- C-> expand the window horizontally
- C-{ -> shrink window vertically
- c-} -> expand window vertically
- C-= -> expand region mode
- C-c p -> in mu4e store the links for next usage in some org-file
  pasting with C-c l
- esc esc i -> opens inbox.org
- esc esc s -> opens scholar.org
- esc esc h -> opens home.org
- How to reschedule: mark the items using *m* -> hit *B* bulk action list ->  *s* to reschedule

** Boorkmarks
- C+x r m -> bookmark set
- C+x r l -> list of bookmarks
- C+x r b -> bookmarkjump

